import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import threading
import time

TOKEN = "7516740132:AAHSFRZtQ77HiA5Bp_st-7PA8_-mZ7E3dJU"
bot = telebot.TeleBot(TOKEN)

user_data = {}
birthdays = {}
months = ["–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
          "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"),
               KeyboardButton("üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"))
    return markup

def month_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [KeyboardButton(month) for month in months]
    markup.add(*buttons)
    return markup

def day_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    buttons = [KeyboardButton(str(day)) for day in range(1, 32)]
    markup.add(*buttons)
    return markup

def confirm_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ"))
    return markup

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
def birthday_checker():
    while True:
        now = datetime.now()
        current_date = f"{now.day} {months[now.month - 1]}"
        if now.hour == 9:  # –í—ñ—Ç–∞–Ω–Ω—è –æ 9:00
            for chat_id, data in birthdays.items():
                if data['date'] == current_date:
                    bot.send_message(chat_id, f"üéâ –í—ñ—Ç–∞—î–º–æ {data['username']} –∑ –î–Ω–µ–º –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! üéÇ")
        time.sleep(3600)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–≥–æ–¥–∏–Ω–∏

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def start_conversation(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"])
def handle_buttons(message):
    if message.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤—ñ–π —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002).")
        user_data[message.chat.id] = {'step': 'year', 'username': message.from_user.username}
    elif message.text == "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
        if birthdays:
            response = "–°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
            for chat_id, data in birthdays.items():
                username = f"@{data['username']}" if data['username'] else message.from_user.first_name
                response += f"{username}: {data['date']}\n"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: message.chat.id in user_data)
def process_info(message):
    chat_id = message.chat.id
    step = user_data[chat_id]['step']

    if step == 'year':
        if message.text.isdigit() and len(message.text) == 4:
            user_data[chat_id]['year'] = message.text
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=month_menu())
            user_data[chat_id]['step'] = 'month'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ 4 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002).")
    elif step == 'month':
        if message.text in months:
            user_data[chat_id]['month'] = message.text
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=day_menu())
            user_data[chat_id]['step'] = 'day'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –º—ñ—Å—è—Ü—å —ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
    elif step == 'day':
        if message.text.isdigit() and 1 <= int(message.text) <= 31:
            user_data[chat_id]['day'] = message.text
            full_date = f"{user_data[chat_id]['day']} {user_data[chat_id]['month']}"
            bot.send_message(chat_id, f"–¢–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {full_date}. –£—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=confirm_menu())
            user_data[chat_id]['step'] = 'confirm'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –¥–µ–Ω—å —ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
    elif step == 'confirm':
        if message.text == "–¢–∞–∫":
            username = message.from_user.username or message.from_user.first_name
            full_date = f"{user_data[chat_id]['day']} {user_data[chat_id]['month']}"
            birthdays[chat_id] = {'username': username, 'date': full_date}
            bot.send_message(chat_id, "–î—è–∫—É—é! –¢–≤–æ—ó –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. üéâ", reply_markup=main_menu())
            del user_data[chat_id]
        else:
            bot.send_message(chat_id, "–î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ —Å–≤—ñ–π —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")
            user_data[chat_id]['step'] = 'year'

@bot.message_handler(commands=['delete_birthday'])
def delete_birthday(message):
    chat_id = message.chat.id
    if chat_id in birthdays:
        del birthdays[chat_id]
        bot.send_message(chat_id, "–í–∞—à –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
    else:
        bot.send_message(chat_id, "–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")

@bot.chat_member_handler(func=lambda message: message.chat.id == message.new_chat_member.id)
def new_member(message):
    if message.new_chat_member.is_bot:
        bot.send_message(
            message.chat.id,
            "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç, —è–∫–∏–π –º–æ–∂–µ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ –∑ –î–Ω–µ–º –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—Å—ñ –∑–∞–±—É–ª–∏! üéâ"
        )
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
threading.Thread(target=birthday_checker, daemon=True).start()
print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
bot.polling()

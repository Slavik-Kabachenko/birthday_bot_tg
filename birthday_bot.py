import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import sqlite3
import threading
import time

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7563338858:AAFRqa2583ScPdIf4G76Wgsy8wP4B0_3O-Y"
bot = telebot.TeleBot(TOKEN)

# üìÖ –ú—ñ—Å—è—Ü—ñ
months = ["–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
          "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]

# üóÇ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
conn = sqlite3.connect("birthdays.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS birthdays (
                    chat_id INTEGER PRIMARY KEY,
                    username TEXT,
                    date TEXT)''')
conn.commit()

user_data = {}

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ –±–∞–∑—ñ
def save_birthday(chat_id, username, date):
    cursor.execute("INSERT OR REPLACE INTO birthdays (chat_id, username, date) VALUES (?, ?, ?)",
                   (chat_id, username, date))
    conn.commit()

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
def get_birthdays():
    cursor.execute("SELECT username, date FROM birthdays")
    return cursor.fetchall()

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
def delete_birthday(chat_id):
    cursor.execute("DELETE FROM birthdays WHERE chat_id = ?", (chat_id,))
    conn.commit()

# üìå –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"),
               KeyboardButton("üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"),
               KeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"))
    return markup

def month_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [KeyboardButton(month) for month in months]
    markup.add(*buttons)
    return markup

def day_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    buttons = [KeyboardButton(str(day)) for day in range(1, 32)]
    markup.add(*buttons)
    return markup

def confirm_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ"))
    return markup

# üéâ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å
def birthday_checker():
    while True:
        now = datetime.now()
        current_date = f"{now.day} {months[now.month - 1]}"
        if now.hour == 9:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –æ 9:00
            cursor.execute("SELECT chat_id, username FROM birthdays WHERE date = ?", (current_date,))
            for chat_id, username in cursor.fetchall():
                bot.send_message(chat_id, f"üéâ –í—ñ—Ç–∞—î–º–æ @{username} –∑ –î–Ω–µ–º –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! üéÇ")
        time.sleep(3600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —â–æ–≥–æ–¥–∏–Ω–∏

# üèÅ –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def start_conversation(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

# üìú –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"
@bot.message_handler(func=lambda message: message.text == "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
def list_birthdays(message):
    birthday_list = get_birthdays()
    if birthday_list:
        response = "üéÇ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
        for username, date in birthday_list:
            response += f"@{username}: {date}\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

# ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
def add_birthday(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤—ñ–π —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002).")
    user_data[message.chat.id] = {'step': 'year', 'username': message.from_user.username}

# ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
@bot.message_handler(func=lambda message: message.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
def remove_birthday(message):
    chat_id = message.chat.id
    delete_birthday(chat_id)
    bot.send_message(chat_id, "–í–∞—à –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.")

# üìù –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–∞–Ω–∏—Ö
@bot.message_handler(func=lambda message: message.chat.id in user_data)
def process_info(message):
    chat_id = message.chat.id
    step = user_data[chat_id]['step']

    if step == 'year':
        if message.text.isdigit() and len(message.text) == 4:
            user_data[chat_id]['year'] = message.text
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=month_menu())
            user_data[chat_id]['step'] = 'month'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ 4 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002).")

    elif step == 'month':
        if message.text in months:
            user_data[chat_id]['month'] = message.text
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=day_menu())
            user_data[chat_id]['step'] = 'day'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å —ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")

    elif step == 'day':
        if message.text.isdigit() and 1 <= int(message.text) <= 31:
            user_data[chat_id]['day'] = message.text
            full_date = f"{user_data[chat_id]['day']} {user_data[chat_id]['month']}"
            bot.send_message(chat_id, f"–¢–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {full_date}. –£—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=confirm_menu())
            user_data[chat_id]['step'] = 'confirm'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")

    elif step == 'confirm':
        if message.text == "–¢–∞–∫":
            username = message.from_user.username or message.from_user.first_name
            full_date = f"{user_data[chat_id]['day']} {user_data[chat_id]['month']}"
            save_birthday(chat_id, username, full_date)
            bot.send_message(chat_id, "–î—è–∫—É—é! –¢–≤–æ—ó –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. üéâ", reply_markup=main_menu())
            del user_data[chat_id]
        else:
            bot.send_message(chat_id, "–î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ —Å–≤—ñ–π —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")
            user_data[chat_id]['step'] = 'year'

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä–Ω–∏–∫–∞ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
threading.Thread(target=birthday_checker, daemon=True).start()
print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
bot.polling()

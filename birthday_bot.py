import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import threading
import time
import pytz
import requests

TOKEN = "7516740132:AAHSFRZtQ77HiA5Bp_st-7PA8_-mZ7E3dJU"
TIMEZONE_API_URL = "http://worldtimeapi.org/api/timezone/"
bot = telebot.TeleBot(TOKEN)

user_data = {}
birthdays = {}
months = ["–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å", "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
    btn2 = KeyboardButton("üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
    markup.add(btn1, btn2)
    return markup

def month_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [KeyboardButton(month) for month in months]
    markup.add(*buttons)
    return markup

def day_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    buttons = [KeyboardButton(str(day)) for day in range(1, 32)]
    markup.add(*buttons)
    return markup

def gender_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton("–ß–æ–ª–æ–≤—ñ–∫"), KeyboardButton("–ñ—ñ–Ω–∫–∞"))
    return markup

def confirm_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ"))
    return markup

def get_local_time(city):
    try:
        response = requests.get(TIMEZONE_API_URL)
        if response.status_code == 200:
            timezones = response.json()
            for tz in timezones:
                if city.lower() in tz.lower():
                    timezone = pytz.timezone(tz)
                    return datetime.now(timezone).strftime('%d %B, %H:%M')
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å"
    except Exception:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å"

def birthday_checker():
    while True:
        now = datetime.now()
        for chat_id, data in birthdays.items():
            city = data['city']
            try:
                local_time = get_local_time(city)
                if "–ù–µ –≤–¥–∞–ª–æ—Å—è" not in local_time:
                    local_hour = int(local_time.split(', ')[1].split(':')[0])
                    if local_hour == 9:
                        bot.send_message(chat_id, f"üéâ –í—ñ—Ç–∞—î–º–æ {data['username']} –∑ –î–Ω–µ–º –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! üéÇ")
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑ —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º –¥–ª—è {city}: {e}")
        time.sleep(60)

@bot.message_handler(commands=['start'])
def start_conversation(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"])
def handle_buttons(message):
    chat_id = message.chat.id
    if message.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
        bot.send_message(chat_id, "–î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ –∑ —Ç–≤–æ–≥–æ —Ä–æ–∫—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. –í–≤–µ–¥–∏ 4 —Ü–∏—Ñ—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002).")
        user_data[chat_id] = {'step': 'year', 'username': message.from_user.username}
    elif message.text == "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
        if birthdays:
            response = "–°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
            markup = InlineKeyboardMarkup()
            for user_chat_id, data in birthdays.items():  # –§—ñ–∫—Å: –∑–∞–º—ñ–Ω–∞ chat_id –Ω–∞ user_chat_id
                username = data['username']
                profile_url = f"tg://user?id={user_chat_id}"  # –í–∫–∞–∑—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ—Ñ—ñ–ª—é
                button = InlineKeyboardButton(f"{username} - {data['date']}", url=profile_url)
                markup.add(button)
            bot.send_message(chat_id, response, reply_markup=markup)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–∞–º–µ —Ç–æ–º—É, —Ö—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É
        else:
            response = "–°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π."
            bot.send_message(chat_id, response)

@bot.message_handler(func=lambda message: message.chat.id in user_data)
def process_info(message):
    chat_id = message.chat.id
    step = user_data[chat_id]['step']

    if step == 'year':
        if message.text.isdigit() and len(message.text) == 4:
            user_data[chat_id]['year'] = message.text
            bot.send_message(chat_id, "–ì–∞—Ä–∞–∑–¥! –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏ –º—ñ—Å—è—Ü—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=month_menu())
            user_data[chat_id]['step'] = 'month'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ 4 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002).")
    elif step == 'month':
        if message.text in months:
            user_data[chat_id]['month'] = message.text
            bot.send_message(chat_id, "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=day_menu())
            user_data[chat_id]['step'] = 'day'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –º—ñ—Å—è—Ü—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=month_menu())
    elif step == 'day':
        if message.text.isdigit() and 1 <= int(message.text) <= 31:
            user_data[chat_id]['day'] = message.text
            bot.send_message(chat_id, "–í–∫–∞–∂–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:", reply_markup=gender_menu())
            user_data[chat_id]['step'] = 'gender'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –¥–µ–Ω—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=day_menu())
    elif step == 'gender':
        if message.text in ["–ß–æ–ª–æ–≤—ñ–∫", "–ñ—ñ–Ω–∫–∞"]:
            user_data[chat_id]['gender'] = message.text
            bot.send_message(chat_id, "–í–∫–∞–∂–∏ –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –ø—Ä–æ–∂–∏–≤–∞—î—à.")
            user_data[chat_id]['step'] = 'city'
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ —Å—Ç–∞—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=gender_menu())
    elif step == 'city':
        user_data[chat_id]['city'] = message.text
        local_time = get_local_time(message.text)
        full_date = f"{user_data[chat_id]['day']} {user_data[chat_id]['month']}"
        bot.send_message(
            chat_id,
            f"–¢–∏ –∑–Ω–∞—Ö–æ–¥–∏—à—Å—è –≤ –º—ñ—Å—Ç—ñ {message.text}. –¢–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {full_date}. –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=confirm_menu()
        )
        user_data[chat_id]['step'] = 'confirm'
    elif step == 'confirm':
        if message.text == "–¢–∞–∫":
            username = message.from_user.username if message.from_user.username else message.from_user.first_name
            chat_city = user_data[chat_id]['city']
            full_date = f"{user_data[chat_id]['day']} {user_data[chat_id]['month']} {user_data[chat_id]['year']}"

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Å–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
            birthdays[chat_id] = {
                'username': username,
                'date': full_date,
                'city': chat_city
            }

            bot.send_message(
                chat_id,
                f"–î—è–∫—É—é! –¢–≤–æ—ó –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. üéâ",
                reply_markup=main_menu()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            )

            del user_data[chat_id]  # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        else:
            bot.send_message(chat_id, "–î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ —Å–≤—ñ–π —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")
            user_data[chat_id]['step'] = 'year'

@bot.message_handler(commands=['delete_birthday'])
def delete_birthday(message):
    chat_id = message.chat.id
    if chat_id in birthdays:
        del birthdays[chat_id]
        bot.send_message(chat_id, "–í–∞—à –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
    else:
        bot.send_message(chat_id, "–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")

@bot.chat_member_handler(func=lambda message: message.chat.id == message.new_chat_member.id)
def new_member(message):
    if message.new_chat_member.is_bot:
        bot.send_message(
            message.chat.id,
            "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç, —è–∫–∏–π –º–æ–∂–µ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ –∑ –î–Ω–µ–º –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—Å—ñ –∑–∞–±—É–ª–∏! üéâ"
        )

threading.Thread(target=birthday_checker, daemon=True).start()
print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
bot.polling()
